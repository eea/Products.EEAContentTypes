""" Fixes
"""
from Products.CMFPlone.utils import getToolByName
import cPickle
import transaction
import logging

logger = logging.getLogger("Migration fix")


def write_folder_order(self):
    """ Write folder order
    """
    catalog = getToolByName(self, "portal_catalog")

    ttool = getToolByName(self, 'portal_types')
    cmf_meta_types = ttool.listContentTypes(by_metatype=1)
    def getCMFObjectsSubsetIds(objs):
        """Get the ids of only cmf objects (used for moveObjectsByDelta)
        """
        return [obj.id for obj in objs if obj.meta_type in cmf_meta_types]

    images = catalog.searchResults(portal_type="Image")
    files = catalog.searchResults(portal_type="File")

    out = open("/tmp/out.pickle", "w")

    parents = set()
    for brain in images + files:
        path = brain.getPath()
        parent = path[:path.rfind('/')]
        parents.add(parent)

    result = {}
    for path in parents:
        logger.info("Recording %s" % path)
        folder = self.restrictedTraverse(path)
        objs = folder.getFolderContents(full_objects=True)
        #objs = [o for o in folder.objectValues() if hasattr(o, 'meta_type')]
        ids = getCMFObjectsSubsetIds(objs)
        result[path] = ids

    cPickle.dump(result, out)
    out.close()

    return "Done export"


def read_folder_order(self):
    """ Folder order
    """
    ttool = getToolByName(self, 'portal_types')
    cmf_meta_types = ttool.listContentTypes(by_metatype=1)
    def getCMFObjectsSubsetIds(objs):
        """Get the ids of only cmf objects (used for moveObjectsByDelta)
        """
        return [obj.id for obj in objs if obj.meta_type in cmf_meta_types]


    source = open("/tmp/out.pickle")
    result = cPickle.load(source)

    toavoid = [
    '/www/SITE/soer/unpublished-content',
    '/www/SITE/soer/published-future',
    '/www/SITE/cop15/cop15-events',
    ]

    for path, oids in result.items():
        logger.info("Doing path: %s" % path)

        if path in toavoid:
            logger.info("Avoiding path: %s" % path)
            continue

        try:
            parent = self.unrestrictedTraverse(path, default=None)
            if parent == None:
                logger.info("Could not get path: %s" % path)
                continue

        except Exception:
            logger.info("Could not get path: %s" % path)
            continue

        objs = parent.getFolderContents(full_objects=True)
        if oids == getCMFObjectsSubsetIds(objs):
            logger.info("Skipping %s because of the same order" % path)
            continue

        for position, oid in enumerate(oids):
            parent.moveObject(oid, position)
            logger.info("%s: Moving %s to position %s" % (path, oid, position))
            obj = parent[oid]
            try:
                obj.reindexObject()
            except Exception, err:
                logger.debug(err)
                continue

        try:
            parent.reindexObject()
        except Exception, err:
            logger.debug(err)

        transaction.commit()

    source.close()

    return "Done import"

def get_order(self):
    """ Order
    """
    ttool = getToolByName(self, 'portal_types')
    cmf_meta_types = ttool.listContentTypes(by_metatype=1)
    def getCMFObjectsSubsetIds(objs):
        """Get the ids of only cmf objects (used for moveObjectsByDelta)
        """
        return [obj.id for obj in objs if obj.meta_type in cmf_meta_types]

    objs = [o for o in self.objectValues() if hasattr(o, 'meta_type')]
    return getCMFObjectsSubsetIds(objs)


def get_order_contents(self):
    """ Order contents
    """
    ttool = getToolByName(self, 'portal_types')
    cmf_meta_types = ttool.listContentTypes(by_metatype=1)
    def getCMFObjectsSubsetIds(objs):
        """Get the ids of only cmf objects (used for moveObjectsByDelta)
        """
        return [obj.id for obj in objs if obj.meta_type in cmf_meta_types]

    objs = self.getFolderContents(full_objects=True)
    return getCMFObjectsSubsetIds(objs)


def set_folder_order(self):
    """Fixes just a folder"""

    ttool = getToolByName(self, 'portal_types')
    cmf_meta_types = ttool.listContentTypes(by_metatype=1)
    def getCMFObjectsSubsetIds(objs):
        """Get the ids of only cmf objects (used for moveObjectsByDelta)
        """
        return [obj.id for obj in objs if obj.meta_type in cmf_meta_types]

    source = open("/tmp/out.pickle")
    result = cPickle.load(source)

    parent = self
    path = '/'.join(parent.getPhysicalPath())
    oids = result[path]

    for position, oid in enumerate(oids):
        parent.moveObject(oid, position)
        logger.info("%s: Moving %s to position %s" % (path, oid, position))
        obj = parent[oid]
        obj.reindexObject()

    parent.reindexObject()

    return "Reorder done"


_UIDS = """
D66A344D-43D5-4FBB-9B6A-B4F5114D8141
FA606910-A431-48BD-A65B-146FE64F5CDC
B650246B-94CB-484B-9F77-A1A728245EE5
1F597B18-528E-415D-A3F5-25E92E3608E7
17C8C1A0-330D-4F02-BE7E-8AE365676EEE
911451EB-F106-4C1A-8E4C-3AB2528980D8
A850AC7E-B435-405A-A9B9-A06E32F4777B
EB8A0E73-0F55-48F4-AF1C-8E55CF1983AC
4B993B75-3E71-4F29-8295-19700BE997C9
E9F6B8CE-D228-4AF1-97AD-270793C5D3A2
CFDDC479-A175-4F1B-B8BA-47BF3E0860B2
529CBA76-530D-4D2F-BFE5-BE1CEA769427
79312A1D-74FE-4381-BF36-142F66CEBBC7
996DC603-7443-4BC1-9677-44BAC498F42C
0C3AD6AE-AF81-43C1-974A-09B8AE8082DC
7C2EC0E1-DF02-4131-AC2F-6B5C34CCA0E4
1ED63EF6-2A84-43D6-AFA2-59DE021BA83B
98EE547B-FEAB-4E93-8A5D-DFCEC710524A
3312F294-5473-42C7-A0E5-FB2FBE5C3272
CC063C3E-30B0-42C4-B85D-20E14A69BF0F
115176E7-E1C3-4A9B-B01D-D2E74E89A2C4
31D13303-F705-4F61-AE79-1A934E5B0AD2
3B00F683-E2F9-4B97-8ADF-E78DDEE13896
C478F921-1F89-4851-A7C7-0F403F8684F5
226A7C95-1A83-4530-BD1A-F9C61C83E3F8
CD09D91A-FA4F-4ED5-BE9F-1B34F924156A
7B561FB1-27AF-4150-9D0E-746F1D9DE431
9F30A95C-3B2F-471A-ABE0-7D14432E38A4
E8A6DF8B-E187-4EE5-84C9-45175D353540
EA21AD5C-9732-492C-AE43-24444942E8AD
F50A3823-3524-485E-85E0-B3425499BB84
032893F6-BBBB-45D9-A2F3-4B8600915301
E81B8718-D027-463B-87AE-3FBA8D70FBFB
1DA0F507-41BA-4262-B61E-86DD50A82B35
4AAA2732-995A-4EBA-9AA6-6ABA1729D03D
251373D4-D6E7-4168-8C4F-E6AD4A066713
0BBD4422-B8B5-419A-882C-EFCC6B7840D3
F189CF5F-79FC-48CC-AA63-FF602629A3C0
2C075865-4553-455F-A40E-A6C7CB78D071
690B7ED9-BD87-494B-B90E-616FB3224064
9002B4EF-0F72-4782-AED1-5B64FB43BB8F
52A69A5B-255E-43E3-B7E3-714899197285
38CD974D-B4DE-4341-B909-2602B0470E30
8D96DCA9-F0FA-4B60-976A-583B9D05811A
E9E11F9C-281F-4B02-B5AD-A6454BA6E8BB
8A526235-3F90-4EB7-A17B-7C21202FDE5D
C70108D1-EEBD-4F57-B6F7-603896827E3B
3C060AC4-9404-4BD1-87FF-0B5BBE9B65B5
C9ED6B4B-14AD-49AA-8F31-1C601F4EA628
A63D0328-D98F-45A0-9CF8-0CA4F74F3F74
4C1E0381-FC07-4311-8816-0E598BD6848C
73046776-A79A-492E-A2AE-94A31A6D2DB7
6FCD3553-A511-440C-A715-AF1790200103
E241D1DF-B02E-4471-8C08-A29A45B9ECF8
400DB9B3-4FBD-4A07-9CB4-E0BF26BB9750
B51E719B-6A21-4840-99BD-2C55EE4DE4CE
17AB67E3-D787-40BB-8550-AF5933FA4771
4834DA48-94FB-423C-96A9-2BB86C1E6C42
9D0BFA3D-4104-461D-8A7E-CC180AC784C7
BE9A40EC-3125-45AD-AB0F-1E58D78067F6
A4CF021F-A093-4E4E-AF12-74E191AB5FBE
61F334CE-474B-4F32-B46D-6FFD1689AA9E
9B798019-C714-44E3-8018-766C20206ED4
C4378D98-74F9-4434-820C-CAFEA0C0888C
33707AA2-7F86-4326-B07B-85DC51FFF529
EEF1BBD2-8769-4B5E-A0C9-B6BD942DE72F
76A0CFF8-7012-4F4C-849E-24D183FAC1C2
76A0CFF8-7012-4F4C-849E-24D183FAC1C2
8C0CC98D-D65B-4871-BC57-0E647BA7EA77
5123EBFD-09E6-431A-8FD2-120335F78D1D
4BE4EA8D-89E3-4A76-8639-99E091480889
33F2FCF4-F9FB-454D-9029-1D57B746A64F
E44F7951-5AA3-49C2-B176-2C1021FF3C4B
64854BF2-D900-4165-A798-F24B8892D6E5
ADB1454E-5ED2-49E7-B915-18B89BF2F898
3FF6144C-5AFA-400E-9C26-AE8C6C8C4A5A
BA2B7D0B-B07F-488B-B14C-FD8A2ADE519B
AE583E88-CA91-44F9-A23E-4C10F0C4015F
82E5060A-B30F-4928-94E5-ACC14081AD02
57AC358A-633F-47FA-8BBE-079AD51F1F2B
6D43EC6A-C827-420E-9BEF-D1EF729766DE
AC0DF611-B523-4D92-BCC0-CDF7A5F59C75
061D4E6F-F2C6-49D8-A918-FEEB2A2624D0
7C53DB08-EDCA-4C91-81B1-91D4F255A927
4863F9A5-6A2D-4890-B77F-5406C7314D78
3C4E6443-25B8-4E51-BD01-05A0AF3560BE
AF342ECC-015D-45EF-A4DF-6BA53012A714
B8BECFCD-B2F0-4B2C-9EBA-A66BBBF7C53D
3ABFC4B7-3523-4B72-ABA6-5582171D44C8
E164F10E-2096-4CF4-B9B8-6289A417A5E2
5FD599F8-C99E-4585-A838-C88A83F31570
BDBBDB1C-E221-4BC5-A700-F156DDA205FF
4F86BC87-39A0-4863-A8D2-11E1029117D9
F5A6D2DC-F27F-49E7-9FE0-5E80D5903475
B7F73089-1F96-4974-9688-53E69CB82550
CE60F4E0-DF0F-4445-8DBD-85F3B537E5FF
2ABF0E4C-DD1F-4F46-AF9C-6E2AF1298031
7D7DE221-6235-462F-906E-80CA24450C29
D6F1DA6C-5ACF-4476-8FD3-444DFE9111FB
D4D7A6BB-132C-449E-AC34-92C7FCF96C08
FCD59940-13AC-4215-A845-BD1F6F4A6C7D
C48DA9BB-2CBE-417E-A9FC-BCDA92793FF6
CA12A25A-3969-438E-9829-1AD42FF22850
9232D201-8EEF-4D70-91F8-73BE74F29018
3EA175EB-C528-492D-B54B-C709E0368FC0
7B8938F5-E32F-4D31-AA66-3292990EE83A
B797E692-B519-4FF0-992A-7C66519E7FB5
ACDE70EE-36AB-4FDD-92B5-39C656CD4CC4
62777E50-91C3-4C97-8DD1-33831780784C
9383A4CF-7C20-4536-A691-C2650B7FB20D
BAD02360-5D14-4270-8D55-69C23BA33D5B
3DDA841F-814B-4EEF-95F0-8F35A478D535
B2904B47-F75B-45EA-8D68-CFFC25A170C9
E5D42EE9-9B95-4B58-9792-EE13F6808964
62EA060B-CEFE-4E71-80A6-3401E7FD2B9C
FFD8FC05-3A3D-41E6-A121-DA51C272C19A
DCBB1A15-CBE0-4046-A9AE-E95F382499F1
B3CFC0FC-E090-46C4-AE37-60D14D99A475
BB04102B-EE3E-4115-A3DC-2878BFA2615B
8FBBF2D7-29C8-41CA-859A-0EC70BAA2339
74B298E6-4537-4B9A-BFC5-B8D50F7E8080
74240AD4-5857-4418-975E-EE48BD27D59C
685B147B-F57B-4BB3-B311-03A49680AC87
CB79816F-AE5F-489E-9EF0-0E0416DBD5BB
0837184C-B4BC-4516-BB7D-B28762271AD9
DA9EA50B-F93D-4A01-BE23-809D3479B456
9FAC96E7-12DA-473F-AC63-66F3A3260F67
ABC9730F-8CFE-406B-93FB-7C04B1D442D1
90C75CB7-B07C-43D0-9EC8-15FB61444FD1
A739EF16-F909-4687-9043-7AB6D8A36A99
C0891D6B-D552-47BC-9B51-7A53780FB22A
F073053E-A788-4623-BBDD-0FDB208A9615
5C029F25-F422-4345-89E1-A4C59ED2D071
67017467-4E94-496A-9A51-4F6DFFDC6F7A
08B5FAB2-10D9-4F30-80B2-3A6DFA68B110
DDAD89F4-8A2F-4202-B155-09512ED56558
224A08D4-90D9-4688-A4F6-FCEE64AF82D2
26DE7FE9-D504-4AF3-AA11-B7EB2FF31617
CE9D16F4-8848-4C0B-A582-DCB4B262F6DA
C46531F2-D4B4-4BE0-BEEB-32754C4EA86A
72B0882A-08A2-467E-AE9F-FCB6451A1E64
6F358714-E8BF-4963-B800-16F06459413B
3AE95508-F3ED-46F5-BC8E-5BFF87BFEC3E
9AF080AD-8124-4296-91F6-8C2C229D24AC
BC37D676-BC5B-4B66-A0E2-226B53D8E402
F4231ED5-6DD7-4AC7-AF6E-AB3741AE5C78
51A188B5-0F4C-47CA-AF25-E5021537AE38
E6646640-52DB-4218-A3A7-40B52EA878D7
50796D46-017E-4812-9829-D0B42D261B55
4B12B3AC-4430-4FEE-8BBF-2C84A61BBF73
F07EE898-ED84-4EDB-A384-4A33DFF0B968
43E244BD-626C-42FA-8DDF-9593CFE45069
5CE1312F-CD35-4AC5-8A1C-459CAB45743F
B1C19A7D-EC38-4A08-81B8-877D328FD155
3085835C-1C12-404A-889E-4FD7798CA078
ACE6C910-E996-4BB8-B42E-E6F6CECADA5B
83C62D9E-6915-4FFB-AB0F-2D3B44EA632A
631C4A0F-7AC6-48E0-9457-4A32D28967F2
430C5614-761B-49F8-B8D7-D7A1373A4416
6B2C40A2-7727-4336-B6F8-2CEA0BF4374A
305DB40F-B336-4A39-A3D2-DBDA86809982
33A9594B-3B8E-4E9C-8F95-052BA8013733
039E5920-28ED-4757-8707-025666062E05
0B23E0D5-D2C5-41C1-9593-5CB916E3E5DE
EB11CFD6-9182-4728-AD5F-20A5A257362A
4F2EC651-B9AF-4D66-B682-694101340192
BEC63DC7-28FB-4B4D-A086-787F8E2A2C01
0E03D25D-C00D-4F54-B7D9-938248D9924E
BBA061E7-9C2F-403D-9D83-CF56A4EEAA94
713FA612-0C8D-4114-9B8A-B7DEEFDA26A2
C9C2A3DE-510B-4390-AC6F-70732E95BBDF
C075EC5B-D7FE-4093-9DDE-08F07F678CEE
FDED3DF9-97FA-4B12-978F-CADEEB72D912
385C3FA0-9221-4303-890D-27B5AEB36493
49DDCD20-7EF6-477B-9745-1921200AFB1E
01A2ED07-1F20-4FE8-9F3C-04D9206A8120
FABB0172-882B-4DD8-B003-4499D07E4391
703FFD01-8ED0-4B0F-AB74-4FD2A84AD5C6
3EC824F8-D62D-40E7-AD1A-7D8A5B4A5AE2
C6B49901-C510-4674-800C-4FCE7DA797D3
145A00A2-49ED-444D-87F5-59ED1799A17E
FDCBF681-4593-42BC-A24C-CD40DA77D5CC
7262768E-3365-4901-A147-8F53B9C4C7C8
A4E8E03F-3086-4999-B1B7-2626B1CFDADB
32E0ACB2-891A-471D-ABAF-E2BBF6A15683
45004FDA-1596-4E8E-A5EB-6C9CEA1617F8
B3541BA0-9301-4A72-8A87-85B86A0F406C
FB335B11-DB72-4A07-A6AD-82A526A825E4
74295F57-DCDD-4262-BABD-65E7ED3AC5FE
90343E6E-7BC5-4842-B46A-D51048584228
D8863221-38AB-41E9-AE17-3F98CE23AFF7
A6EC4E4B-C210-4FFD-9C8F-E41218CE1CBD
DB08FCC9-5E1A-475B-B58F-9CD7868D62F2
3346587C-47E5-4D8E-B20E-8DB1B19E477A
7E44EA38-AF02-414C-868F-08BD37455DD4
8286677E-5A60-4E17-A256-994696F411B1
3A5FA11B-241A-4810-9FBA-4687275D6954
9DFBD878-B901-48FD-B766-8713605EE018
04A112E5-4583-4FD3-AF35-C4B7258ECFB5
5E5C139F-FE19-4F73-ACD7-53ECA3A37BCC
0092E3AC-A039-4FA9-B89A-D2E66FCE7BF9
94ADC53C-9B5D-42F1-B06D-12005D1D5E9A
C147271F-9C2E-4798-AD55-BA89B9D994AF
9BF1EAC9-0CD8-41BE-BAEB-34C280471938
2BC384A6-3B45-43DD-9279-102B41BDDC5C
661776B8-6F94-40B6-9E3E-1060D0B2E3B4
51211B31-CD81-4DA7-95A4-28ABD875E513
B6A1C059-62E1-4A48-BF0A-85B9AA99BF56
0DB606E2-36AF-4284-AA38-EF3BA54A510B
4A172627-9416-4488-BCA1-B15D9E7D5CFA
3E3F16D3-D94D-44AF-A662-F81FA4B9597E
39BDC261-189A-4E68-8554-443EE05528D6
87BF2EAE-8BBE-45A4-B3BB-14519B83F688
BAA45302-E0FC-40B0-91B4-49F512DBC68C
3E35983A-70E8-499B-9600-A7FD5113E658
B0A155E4-081C-4EAD-9C76-7C2CF1D9BDDE
75E60ECA-F796-43DF-89FA-DF633877CC0B
B88A300C-7235-41DD-AD0C-FCDA220114AB
0D6EAC1C-2E6E-4CB2-A082-4EC758F34361
C9571534-A2FB-4BF7-9D80-F84B9CC22752
D5C23D7F-DCF1-44C1-97CA-7E9D29157533
A3F31434-CC26-46EE-AABA-9196A58B7539
BF6CA5BD-DB09-46E9-80C0-0682A5DF1B02
97502DDF-4323-401F-8A88-8601179FF5B0
827D9018-6D2E-4151-B7F1-483CF76D5A18
F719F7B9-D726-4C18-92E9-A263967E4246
2F771042-399C-45B8-8A90-05E36B411DCB
0A0AFF30-17AA-4AA3-86A7-32DBC520B39F
7F1AAFA8-6F81-4A7F-8D1E-F7A55D0720E6
B7E6F2DA-9E14-437C-AC8E-B0FD14D6B037
E39F1F97-9D6E-4961-A76F-12E89CF948FA
8717939C-6069-4ADD-B86E-64D447062EEF
BBB87783-81A6-4446-9855-2BCF979DDD05
B3AF82AC-B1E1-4798-B719-994CBD6C41DD
2D618790-549A-4DA5-8837-EB4BE2313075
11B90787-13E1-4919-9CD5-E2525ACBF548
57CBFAAA-3877-400B-AABB-2E88F400637C
BEEF6A5C-A9D2-413C-86F8-44803F1E7C9A
671F422D-7BF6-42EE-B925-E3CDA25490CE
1D240CC5-8B3E-4913-8339-86A13FCFEE02
8917B243-2FCA-43FE-BBEA-F650BD158B97
2471A219-C59D-4543-A69A-FA58DDA2D984
8CFE1A10-A3E6-403C-A92A-7FA87549EFBE
FD54C9DB-7FB2-4C3A-87CC-B4C4396A7993
9EBED628-AA5A-4E0D-B21F-8D20D51E62DF
38F84931-02B1-4086-88EC-299978AC0503
0D6E8EF3-8E1C-4098-8401-AC665105C02E
108B4199-71ED-4DC9-8641-AE3F13CF164B
DA3B2DB9-2875-49C7-9C7E-415090C2123A
BA1DF489-40CE-4246-92F7-DBF4EBEDAACE
8C12A8B1-56F2-4D94-9E93-00E7CF4226A5
9B5A6362-531C-4CE5-B327-2687958ADD0F
A00C186D-1C94-4614-B3A9-11ABF4BE3C21
28D110E4-30FD-478C-8283-72F7A3B52989
D2270A0D-D704-446D-9E4D-9CCBB69667CF
318AA739-BFAB-4BE9-9B55-A9EA44370A72
14ED7C20-D2AC-4C0F-A44B-0FC4A495BFA4
57D53104-722E-418D-A655-0C321A5DE8B5
D967DCDC-68EA-4F81-9257-53A77A88C873
768FCFB8-AFF0-4564-A5D8-E8ACCC837757
9124D9F1-241F-4885-9C40-774D70403A2F
9119D1C6-5243-4E3E-94A6-D3BF81743D2A
52D9E1BB-EE0D-4A6B-8B47-7E25440A03E2
7B76B93F-DFFB-42E0-94C1-E41A9B7B0CB1
D8DF8B49-11AF-4A95-81AE-10F1497D8E65
94836624-8346-47F4-8D11-5531EBC0A2E2
0FF24137-0D1F-4477-AC15-41F6051F111B
1249EB31-D5DD-4337-95F7-C8ADF2FF7230
C7714256-0EEA-4F95-90B3-385826210784
983436DE-8358-48F4-BE02-565BED1E7993
BD434703-A0F9-4217-9E6A-3908EFC1F163
BA8671EC-6CC3-4762-B4B7-42E9731797A5
A3674F61-1EF9-4684-8D3D-1A11A27C2A03
3A07B674-6F25-4BEA-BD33-D0A10E29346F
2451E6C8-B311-4DB1-B8BB-99AD1F5CD7C0
9B1514DB-F0B2-449D-800C-DA3041CB4079
CF586346-F425-4782-8456-554A4B2F1520
DA37FD1D-6EA7-4904-BEBD-27221B238C21
D1E06014-24A1-429C-944D-A57B82DC9DC9
69BBBBA0-5A7C-4A28-BCA3-E7B3084360B7
A30AD330-7A2D-4C49-BC99-5454EB210E3B
0DDCFE98-E849-4924-9CFC-5B09766AB577
43495A88-7571-4838-B1C0-48C0AE1F068A
833BDBA0-18F6-423F-AAB4-18CA1B27E753
E28AC79A-1A46-40CB-811C-ACAE59D0DD7D
E794E159-7372-42B2-BC04-B4B988EDF834
84B3B87D-24E2-4DDF-8AF5-2D7C6CD962E5
D730CBE4-DE4C-4B80-9521-F12C3C04CBE6
2B786635-54DC-4C34-8E83-82B74D338049
285E4903-8C17-4BDF-9089-9A816F609717
6915DE68-9633-4E8F-BEC5-0F2C3E8BDCF5
D2FDFA55-BCC3-4CA5-937E-D7D50542F666
87E0F9B6-B6E6-49EA-AC2B-596C8192578B
C0715F6C-9B77-4C02-9867-22BB32E5BA37
806FC407-2E3D-4233-8D61-09F2044AD277
EACC2E9A-CA3F-4A4E-9822-2FF5770A8EFA
E5947FC7-68DB-4528-96E8-3515F67037D3
24538860-A7B9-41C8-85EE-97C3E8B06F8A
05968742-F1B6-4842-ADD5-3327A183DE2A
1F5797AF-128B-4BFE-B6A0-C90878EF7B38
27304641-34EC-46B0-BD25-0885E8BA7542
D1DD7EE0-04A7-416B-B355-C1EB68FFADDC
D810C7B6-E4D3-4741-92D2-2C0D06929A97
F1D947D8-33EA-459F-BD56-4C71EA1FFEF9
5D34FED0-1A24-4C82-B074-32D446D6269C
34025BC5-16F0-4243-A197-1AD1EB5B331B
B54D8CF4-0530-4766-A7CB-C7EE12DFA8D8
DFD1FC62-537C-4D1E-916B-C42515460E2B
2D42FF8F-7191-4C02-9C57-DD88EE16751A
71E41055-9483-4DD6-9647-BCC02B117C97
6CF607BA-AEE1-421A-B5A2-F377938FF6AB
CE28F916-10EB-42FA-B7B6-3B0B00A56148
D09121A5-2991-4414-ACBB-BAE2A8A1F905
E801D3E6-A629-45D6-BD86-9E2537B67D11
E35AC253-699E-4E6E-B551-DB14753FC234
76EB685D-F76D-40A7-B9D2-B7F0EFAB563D
F4082B94-5B12-4B58-8189-D769B6704856
E0653851-BAA5-429C-9E67-C5CD1A0F06AE
E8DFBB73-BF21-45D5-821E-489B204FB149
A4D64035-A8E4-4EC3-B2CB-3CD8C12A6F8B
41D5BDBF-925A-4C8A-9F57-E49C21E2DE28
09CC5147-EAE8-4397-8F3F-0023E6F3296B
AB0EEC39-1A51-460B-AF76-FE2DBB7E7D23
4BA60E26-109B-4AAD-AE0B-7830D90DBD7B
6A7A717C-9FE4-467D-B494-A1896D4C2B43
B23E7F00-DA51-4EF0-B1A5-C7DD8CBBE48D
5CF8F90D-1504-4485-9974-EB372BE5DCC5
CE0F7AE4-BCD7-4F67-8C1D-AD0A048656C9
E9796B88-0B00-482C-969E-CEAA8690C6DF
96CA2B71-C554-44BE-84D6-9EF1FE386014
E3361554-5D08-47F8-ACDD-07D0BA5731FE
62E69F2A-2244-4E2E-8929-72846FC00FAF
104392E9-E6C6-46B0-B4CA-5C69ACAA5093
738FEF82-5125-4084-B886-A335BF2CEA8C
C86B35B2-B32E-41A6-8EDC-FA1FB162F5AE
2BDF8F6C-C11B-4C2D-A61F-EAA60E41671E
3FDF8EA8-11CF-47CB-867D-E63B9371FD19
6557034D-375E-4D5E-8C52-E81A28C4BD71
AE472B43-B878-4721-866C-0B94448F94ED
280F5030-98C7-431F-8463-16F1DBFF4A60
BF4BDFE0-4177-4E71-B4D5-716D95D36534
282A1A99-102B-49D3-A86D-FDE7D3D59737
496A02B9-0E38-4F7C-8DA5-1F1CD2BE99ED
AE8F99DD-7F6B-4525-8F63-6D7B519BCD75
80478614-339E-4C45-8739-69C436237C83
EF564F06-8334-4B1E-9005-62CA16C06EE1
67C99881-4B63-4B66-B669-0252BD4B146F
BDCB6417-8774-471A-A10A-36772830B570
EE33B23C-BFF0-48C5-95EA-46AF8AAFE730
E6B99ABC-E7FD-4F97-B100-21381E0A235F
BE4D5D39-C5BB-4C60-AE2B-B1BC4B77849C
384286D7-A3EF-44F9-96E8-B6581DE76725
9997E01F-8DCD-4F84-ADB3-F57F54839A31
9A2286C8-6DA7-42DF-95DB-F62C7BE874CA
49A61116-4AA5-46A6-A8DD-E3CCCDC1F913
67FEC538-D987-4827-8601-56EC0260B559
83BAE508-3C19-4B1A-8E59-02A9B8BA7284
6326B6DC-565A-4664-9F09-D46ED1ED3806
BEE778D6-68CE-4025-9219-D0E2ABBEF632
BBDD36C8-1D9E-4AE2-BBA5-CB6904F72D55
FC3897E9-9AD3-4E7D-A176-1E15051F2FD2
F6775DCA-E82C-4D42-90F1-892835E23FA4
DBE807FB-4354-467C-8EE7-3120D275B677
2D1F2E76-596D-49BF-9E23-89FEA1934EE5
FF156ADE-A1B2-4FD5-BED4-94DFB2CF584B
FE3F1C2C-2CBC-4903-94AC-735A2A42EFC0
68ED9BFC-5ACA-42B0-970C-03E0A0AA5C08
099BF25B-C634-4E44-83C2-5EE3DB28C006
B6403AF5-6F7F-441E-867A-779F2CD67166
D13380BB-D037-4926-BBDB-8AD86150D383
9e1b1bc1198552e8e5eeae494ca938aa
699f15acb0985665f5e2cb639f63f762
8d62e22562eab38d283a5832c37ef320
"""


def fix_categories_maps(self):
    """ Recategorize some maps as graphs
    """
    uids = filter(None, _UIDS.split("\n"))
    catalog = self.portal_catalog

    i = 0
    for uid in uids:
        obj = catalog.searchResults(UID=uid)[0].getObject()
        obj.setFigureType('graph')
        obj.reindexObject()
        logging.info("Changed figure type for %s", obj)
        if i % 10 == 0:
            transaction.commit()

    logging.info("Done changing figure types")
    return "Done"
